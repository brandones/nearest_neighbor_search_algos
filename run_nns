#!/usr/bin/python

from nns_bruteforce import nns_bruteforce
from nns_cube import nns_cube
from generate_S import generate_S
from random import random

infile_name = input("Enter input file name or blank to generate\n")

if not infile_name:
    n = int( input( "Enter a number of points\n" ))
    d = int( input( "Enter a number of dimensions\n" ))
    writeout = input( "Want a file? 'y' or 'n'\n" ) == "y"
    S = generate_S( n, d, writeout )

else:
    with open(infile_name, "r") as infile:
        S = eval(infile.read())

d = len(S[0])

q_input = input( str.format(
        "Enter a tuple with {} elements to query a neighbor for, " +
        "or blank to randomly generate\n", d))

if not q_input:
    q = tuple( (random() for i in range(d)))
    print( str.format("q = {}\n", q))
else:
    q = eval( q_input )

selection = input( "Enter 0 for bruteforce, 1 for cube\n" )
if selection == "0":
    result = nns_bruteforce( S, q )
elif selection == "1":
    result = nns_cube( S, q )

print( str.format("Nearest neighbor: {}\n", result))
